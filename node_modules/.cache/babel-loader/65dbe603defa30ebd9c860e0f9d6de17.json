{"ast":null,"code":"import { toast } from 'react-toastify';\nimport users from 'constants/api/users';\nimport axios, { setAuthorizationHeader } from './index';\nexport default function errorHandler(error) {\n  console.log(\"hello\");\n\n  if (error) {\n    let message;\n\n    if (error.response) {\n      const originalRequest = error.config;\n      if (error.response.status === 500) message = 'Something went terribly wrong';else if (error.response.status === 403 && !originalRequest._retry) {\n        originalRequest._retry = true;\n        const session = localStorage['FA:token'] ? JSON.parse(localStorage['FA:token']) : null;\n        return users.refresh({\n          refresh_token: session.refresh_token,\n          npm: session.u\n        }).then(res => {\n          if (res.data) {\n            setAuthorizationHeader(res.data.token);\n            localStorage.setItem('FA:token', JSON.stringify({ ...session,\n              token: res.data.token\n            }));\n            console.log(\"hello\");\n            originalRequest.headers.authorization = res.data.token;\n            return axios(originalRequest);\n          } else {\n            window.location.href = '/login';\n            localStorage.removeItem('FA:token');\n          }\n        });\n      } else message = error.response.data.message;\n      if (typeof message === 'string') toast.error(message);\n      return Promise.reject(error);\n    }\n  }\n}","map":{"version":3,"sources":["/Users/muhammadrenauldi/Development/fa/frontend/memberpage/src/configs/axios/errorHandler.js"],"names":["toast","users","axios","setAuthorizationHeader","errorHandler","error","console","log","message","response","originalRequest","config","status","_retry","session","localStorage","JSON","parse","refresh","refresh_token","npm","u","then","res","data","token","setItem","stringify","headers","authorization","window","location","href","removeItem","Promise","reject"],"mappings":"AAAA,SAASA,KAAT,QAAsB,gBAAtB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AAEA,OAAOC,KAAP,IAAgBC,sBAAhB,QAA8C,SAA9C;AAEA,eAAe,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC3CC,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;;AACA,MAAIF,KAAJ,EAAW;AACV,QAAIG,OAAJ;;AACA,QAAIH,KAAK,CAACI,QAAV,EAAoB;AACnB,YAAMC,eAAe,GAAGL,KAAK,CAACM,MAA9B;AACA,UAAIN,KAAK,CAACI,QAAN,CAAeG,MAAf,KAA0B,GAA9B,EACCJ,OAAO,GAAG,+BAAV,CADD,KAEK,IAAIH,KAAK,CAACI,QAAN,CAAeG,MAAf,KAA0B,GAA1B,IAAiC,CAACF,eAAe,CAACG,MAAtD,EAA8D;AAClEH,QAAAA,eAAe,CAACG,MAAhB,GAAyB,IAAzB;AACA,cAAMC,OAAO,GAAGC,YAAY,CAAC,UAAD,CAAZ,GACbC,IAAI,CAACC,KAAL,CAAWF,YAAY,CAAC,UAAD,CAAvB,CADa,GAEb,IAFH;AAGA,eAAOd,KAAK,CACViB,OADK,CACG;AACRC,UAAAA,aAAa,EAAEL,OAAO,CAACK,aADf;AAERC,UAAAA,GAAG,EAAEN,OAAO,CAACO;AAFL,SADH,EAKLC,IALK,CAKCC,GAAD,IAAS;AACd,cAAIA,GAAG,CAACC,IAAR,EAAc;AACbrB,YAAAA,sBAAsB,CAACoB,GAAG,CAACC,IAAJ,CAASC,KAAV,CAAtB;AACAV,YAAAA,YAAY,CAACW,OAAb,CACC,UADD,EAECV,IAAI,CAACW,SAAL,CAAe,EACd,GAAGb,OADW;AAEdW,cAAAA,KAAK,EAAEF,GAAG,CAACC,IAAJ,CAASC;AAFF,aAAf,CAFD;AAOCnB,YAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACDG,YAAAA,eAAe,CAACkB,OAAhB,CAAwBC,aAAxB,GAAwCN,GAAG,CAACC,IAAJ,CAASC,KAAjD;AAEA,mBAAOvB,KAAK,CAACQ,eAAD,CAAZ;AACA,WAbD,MAaO;AACNoB,YAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,QAAvB;AACAjB,YAAAA,YAAY,CAACkB,UAAb,CAAwB,UAAxB;AACA;AACD,SAvBK,CAAP;AAwBA,OA7BI,MA6BEzB,OAAO,GAAGH,KAAK,CAACI,QAAN,CAAee,IAAf,CAAoBhB,OAA9B;AAEP,UAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiCR,KAAK,CAACK,KAAN,CAAYG,OAAZ;AAEjC,aAAO0B,OAAO,CAACC,MAAR,CAAe9B,KAAf,CAAP;AACA;AACD;AACD","sourcesContent":["import { toast } from 'react-toastify';\nimport users from 'constants/api/users';\n\nimport axios, { setAuthorizationHeader } from './index';\n\nexport default function errorHandler(error) {\n\tconsole.log(\"hello\");\n\tif (error) {\n\t\tlet message;\n\t\tif (error.response) {\n\t\t\tconst originalRequest = error.config;\n\t\t\tif (error.response.status === 500)\n\t\t\t\tmessage = 'Something went terribly wrong';\n\t\t\telse if (error.response.status === 403 && !originalRequest._retry) {\n\t\t\t\toriginalRequest._retry = true;\n\t\t\t\tconst session = localStorage['FA:token']\n\t\t\t\t\t? JSON.parse(localStorage['FA:token'])\n\t\t\t\t\t: null;\n\t\t\t\treturn users\n\t\t\t\t\t.refresh({\n\t\t\t\t\t\trefresh_token: session.refresh_token,\n\t\t\t\t\t\tnpm: session.u,\n\t\t\t\t\t})\n\t\t\t\t\t.then((res) => {\n\t\t\t\t\t\tif (res.data) {\n\t\t\t\t\t\t\tsetAuthorizationHeader(res.data.token);\n\t\t\t\t\t\t\tlocalStorage.setItem(\n\t\t\t\t\t\t\t\t'FA:token',\n\t\t\t\t\t\t\t\tJSON.stringify({\n\t\t\t\t\t\t\t\t\t...session,\n\t\t\t\t\t\t\t\t\ttoken: res.data.token,\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tconsole.log(\"hello\")\n\t\t\t\t\t\t\toriginalRequest.headers.authorization = res.data.token;\n\n\t\t\t\t\t\t\treturn axios(originalRequest);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\twindow.location.href = '/login';\n\t\t\t\t\t\t\tlocalStorage.removeItem('FA:token');\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t} else message = error.response.data.message;\n\n\t\t\tif (typeof message === 'string') toast.error(message);\n\n\t\t\treturn Promise.reject(error);\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}