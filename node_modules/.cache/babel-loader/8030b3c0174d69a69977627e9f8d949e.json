{"ast":null,"code":"import { toast } from \"react-toastify\";\nimport users from \"constants/api/users\";\nimport axios, { setAuthorizationHeader } from \"./index\";\nexport default function errorHandler(error) {\n  if (error) {\n    let message;\n\n    if (error.response) {\n      const originalRequest = error.config;\n      if (error.response.status === 500) message = \"Something went terribly wrong\";else if (error.response.status === 403 && !originalRequest._retry) {\n        originalRequest._retry = true;\n        const session = localStorage[\"FA:token\"] ? JSON.parse(localStorage[\"FA:token\"]) : null;\n        return users.refresh({\n          refresh_token: session.refresh_token,\n          npm: session.u\n        }).then(res => {\n          if (res.data) {\n            setAuthorizationHeader(res.data.token);\n            localStorage.setItem(\"FA:token\", JSON.stringify({ ...session,\n              token: res.data.token\n            }));\n            originalRequest.headers.authorization = res.data.token;\n            return axios(originalRequest);\n          } else {\n            window.location.href = \"/login\";\n            localStorage.removeItem(\"FA:token\");\n          }\n        });\n      } else message = error.response.data.message;\n      if (typeof message === \"string\") toast.error(message);\n      return Promise.reject(error);\n    }\n  }\n}","map":{"version":3,"sources":["/Users/muhammadrenauldi/Development/fa/frontend/memberpage/src/configs/axios/errorHandler.js"],"names":["toast","users","axios","setAuthorizationHeader","errorHandler","error","message","response","originalRequest","config","status","_retry","session","localStorage","JSON","parse","refresh","refresh_token","npm","u","then","res","data","token","setItem","stringify","headers","authorization","window","location","href","removeItem","Promise","reject"],"mappings":"AAAA,SAASA,KAAT,QAAsB,gBAAtB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AAEA,OAAOC,KAAP,IAAgBC,sBAAhB,QAA8C,SAA9C;AAEA,eAAe,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC1C,MAAIA,KAAJ,EAAW;AACT,QAAIC,OAAJ;;AACA,QAAID,KAAK,CAACE,QAAV,EAAoB;AAClB,YAAMC,eAAe,GAAGH,KAAK,CAACI,MAA9B;AACA,UAAIJ,KAAK,CAACE,QAAN,CAAeG,MAAf,KAA0B,GAA9B,EACEJ,OAAO,GAAG,+BAAV,CADF,KAEK,IAAID,KAAK,CAACE,QAAN,CAAeG,MAAf,KAA0B,GAA1B,IAAiC,CAACF,eAAe,CAACG,MAAtD,EAA8D;AACjEH,QAAAA,eAAe,CAACG,MAAhB,GAAyB,IAAzB;AACA,cAAMC,OAAO,GAAGC,YAAY,CAAC,UAAD,CAAZ,GACZC,IAAI,CAACC,KAAL,CAAWF,YAAY,CAAC,UAAD,CAAvB,CADY,GAEZ,IAFJ;AAGA,eAAOZ,KAAK,CACTe,OADI,CACI;AACPC,UAAAA,aAAa,EAAEL,OAAO,CAACK,aADhB;AAEPC,UAAAA,GAAG,EAAEN,OAAO,CAACO;AAFN,SADJ,EAKJC,IALI,CAKEC,GAAD,IAAS;AACb,cAAIA,GAAG,CAACC,IAAR,EAAc;AACZnB,YAAAA,sBAAsB,CAACkB,GAAG,CAACC,IAAJ,CAASC,KAAV,CAAtB;AACAV,YAAAA,YAAY,CAACW,OAAb,CACE,UADF,EAEEV,IAAI,CAACW,SAAL,CAAe,EACb,GAAGb,OADU;AAEbW,cAAAA,KAAK,EAAEF,GAAG,CAACC,IAAJ,CAASC;AAFH,aAAf,CAFF;AAQAf,YAAAA,eAAe,CAACkB,OAAhB,CAAwBC,aAAxB,GAAwCN,GAAG,CAACC,IAAJ,CAASC,KAAjD;AAEA,mBAAOrB,KAAK,CAACM,eAAD,CAAZ;AACD,WAbD,MAaO;AACLoB,YAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,QAAvB;AACAjB,YAAAA,YAAY,CAACkB,UAAb,CAAwB,UAAxB;AACD;AACF,SAvBI,CAAP;AAwBD,OA7BI,MA6BEzB,OAAO,GAAGD,KAAK,CAACE,QAAN,CAAee,IAAf,CAAoBhB,OAA9B;AAEP,UAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiCN,KAAK,CAACK,KAAN,CAAYC,OAAZ;AAEjC,aAAO0B,OAAO,CAACC,MAAR,CAAe5B,KAAf,CAAP;AACD;AACF;AACF","sourcesContent":["import { toast } from \"react-toastify\";\nimport users from \"constants/api/users\";\n\nimport axios, { setAuthorizationHeader } from \"./index\";\n\nexport default function errorHandler(error) {\n  if (error) {\n    let message;\n    if (error.response) {\n      const originalRequest = error.config;\n      if (error.response.status === 500)\n        message = \"Something went terribly wrong\";\n      else if (error.response.status === 403 && !originalRequest._retry) {\n        originalRequest._retry = true;\n        const session = localStorage[\"FA:token\"]\n          ? JSON.parse(localStorage[\"FA:token\"])\n          : null;\n        return users\n          .refresh({\n            refresh_token: session.refresh_token,\n            npm: session.u,\n          })\n          .then((res) => {\n            if (res.data) {\n              setAuthorizationHeader(res.data.token);\n              localStorage.setItem(\n                \"FA:token\",\n                JSON.stringify({\n                  ...session,\n                  token: res.data.token,\n                })\n              );\n\n              originalRequest.headers.authorization = res.data.token;\n\n              return axios(originalRequest);\n            } else {\n              window.location.href = \"/login\";\n              localStorage.removeItem(\"FA:token\");\n            }\n          });\n      } else message = error.response.data.message;\n\n      if (typeof message === \"string\") toast.error(message);\n\n      return Promise.reject(error);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}