{"ast":null,"code":"import { toast } from 'react-toastify';\nimport users from 'constants/api/users';\nimport axios, { setAuthorizationHeader } from './index';\nexport default function errorHandler(error) {\n  if (error) {\n    let message;\n\n    if (error.response) {\n      const originalRequest = error.config;\n      if (error.response.status === 500) message = 'Something went terribly wrong';else if (error.response.status === 403 && !originalRequest._retry) {\n        if (error.response.data.message === 'jwt expired') {\n          window.location.href = '/login';\n          localStorage.removeItem('FA:token');\n        }\n\n        console.log(error.response.data.message);\n        originalRequest._retry = true;\n        const session = localStorage['FA:token'] ? JSON.parse(localStorage['FA:token']) : null;\n        return users.refresh({\n          refresh_token: session.refresh_token,\n          npm: session.u\n        }).then(res => {\n          if (res.data) {\n            setAuthorizationHeader(res.data.token);\n            localStorage.setItem('FA:token', JSON.stringify({ ...session,\n              token: res.data.token\n            }));\n            originalRequest.headers.authorization = res.data.token;\n            return axios(originalRequest);\n          } else {\n            window.location.href = '/login';\n            localStorage.removeItem('FA:token');\n          }\n        });\n      } else message = error.response.data.message;\n      if (typeof message === 'string') toast.error(message);\n      return Promise.reject(error);\n    }\n  }\n}","map":{"version":3,"sources":["/Users/muhammadrenauldi/Development/fa/frontend/memberpage/src/configs/axios/errorHandler.js"],"names":["toast","users","axios","setAuthorizationHeader","errorHandler","error","message","response","originalRequest","config","status","_retry","data","window","location","href","localStorage","removeItem","console","log","session","JSON","parse","refresh","refresh_token","npm","u","then","res","token","setItem","stringify","headers","authorization","Promise","reject"],"mappings":"AAAA,SAASA,KAAT,QAAsB,gBAAtB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AAEA,OAAOC,KAAP,IAAgBC,sBAAhB,QAA8C,SAA9C;AAEA,eAAe,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC3C,MAAIA,KAAJ,EAAW;AACV,QAAIC,OAAJ;;AACA,QAAID,KAAK,CAACE,QAAV,EAAoB;AACnB,YAAMC,eAAe,GAAGH,KAAK,CAACI,MAA9B;AACA,UAAIJ,KAAK,CAACE,QAAN,CAAeG,MAAf,KAA0B,GAA9B,EACCJ,OAAO,GAAG,+BAAV,CADD,KAEK,IAAID,KAAK,CAACE,QAAN,CAAeG,MAAf,KAA0B,GAA1B,IAAiC,CAACF,eAAe,CAACG,MAAtD,EAA8D;AAClE,YAAIN,KAAK,CAACE,QAAN,CAAeK,IAAf,CAAoBN,OAApB,KAAgC,aAApC,EAAmD;AAClDO,UAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,QAAvB;AACAC,UAAAA,YAAY,CAACC,UAAb,CAAwB,UAAxB;AACA;;AAEDC,QAAAA,OAAO,CAACC,GAAR,CAAYd,KAAK,CAACE,QAAN,CAAeK,IAAf,CAAoBN,OAAhC;AACAE,QAAAA,eAAe,CAACG,MAAhB,GAAyB,IAAzB;AACA,cAAMS,OAAO,GAAGJ,YAAY,CAAC,UAAD,CAAZ,GACbK,IAAI,CAACC,KAAL,CAAWN,YAAY,CAAC,UAAD,CAAvB,CADa,GAEb,IAFH;AAGA,eAAOf,KAAK,CACVsB,OADK,CACG;AACRC,UAAAA,aAAa,EAAEJ,OAAO,CAACI,aADf;AAERC,UAAAA,GAAG,EAAEL,OAAO,CAACM;AAFL,SADH,EAKLC,IALK,CAKCC,GAAD,IAAS;AACd,cAAIA,GAAG,CAAChB,IAAR,EAAc;AACbT,YAAAA,sBAAsB,CAACyB,GAAG,CAAChB,IAAJ,CAASiB,KAAV,CAAtB;AACAb,YAAAA,YAAY,CAACc,OAAb,CACC,UADD,EAECT,IAAI,CAACU,SAAL,CAAe,EACd,GAAGX,OADW;AAEdS,cAAAA,KAAK,EAAED,GAAG,CAAChB,IAAJ,CAASiB;AAFF,aAAf,CAFD;AAQArB,YAAAA,eAAe,CAACwB,OAAhB,CAAwBC,aAAxB,GAAwCL,GAAG,CAAChB,IAAJ,CAASiB,KAAjD;AAEA,mBAAO3B,KAAK,CAACM,eAAD,CAAZ;AACA,WAbD,MAaO;AACNK,YAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,QAAvB;AACAC,YAAAA,YAAY,CAACC,UAAb,CAAwB,UAAxB;AACA;AACD,SAvBK,CAAP;AAwBA,OAnCI,MAmCEX,OAAO,GAAGD,KAAK,CAACE,QAAN,CAAeK,IAAf,CAAoBN,OAA9B;AAEP,UAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiCN,KAAK,CAACK,KAAN,CAAYC,OAAZ;AAEjC,aAAO4B,OAAO,CAACC,MAAR,CAAe9B,KAAf,CAAP;AACA;AACD;AACD","sourcesContent":["import { toast } from 'react-toastify';\nimport users from 'constants/api/users';\n\nimport axios, { setAuthorizationHeader } from './index';\n\nexport default function errorHandler(error) {\n\tif (error) {\n\t\tlet message;\n\t\tif (error.response) {\n\t\t\tconst originalRequest = error.config;\n\t\t\tif (error.response.status === 500)\n\t\t\t\tmessage = 'Something went terribly wrong';\n\t\t\telse if (error.response.status === 403 && !originalRequest._retry) {\n\t\t\t\tif (error.response.data.message === 'jwt expired') {\n\t\t\t\t\twindow.location.href = '/login';\n\t\t\t\t\tlocalStorage.removeItem('FA:token');\n\t\t\t\t}\n\n\t\t\t\tconsole.log(error.response.data.message)\n\t\t\t\toriginalRequest._retry = true;\n\t\t\t\tconst session = localStorage['FA:token']\n\t\t\t\t\t? JSON.parse(localStorage['FA:token'])\n\t\t\t\t\t: null;\n\t\t\t\treturn users\n\t\t\t\t\t.refresh({\n\t\t\t\t\t\trefresh_token: session.refresh_token,\n\t\t\t\t\t\tnpm: session.u,\n\t\t\t\t\t})\n\t\t\t\t\t.then((res) => {\n\t\t\t\t\t\tif (res.data) {\n\t\t\t\t\t\t\tsetAuthorizationHeader(res.data.token);\n\t\t\t\t\t\t\tlocalStorage.setItem(\n\t\t\t\t\t\t\t\t'FA:token',\n\t\t\t\t\t\t\t\tJSON.stringify({\n\t\t\t\t\t\t\t\t\t...session,\n\t\t\t\t\t\t\t\t\ttoken: res.data.token,\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\toriginalRequest.headers.authorization = res.data.token;\n\n\t\t\t\t\t\t\treturn axios(originalRequest);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\twindow.location.href = '/login';\n\t\t\t\t\t\t\tlocalStorage.removeItem('FA:token');\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t} else message = error.response.data.message;\n\n\t\t\tif (typeof message === 'string') toast.error(message);\n\n\t\t\treturn Promise.reject(error);\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}